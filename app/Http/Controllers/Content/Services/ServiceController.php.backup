<?php

namespace App\Http\Controllers\Content\Services;

use App\Http\Controllers\Controller;
use App\Models\Content;
use App\Models\Configuration;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;
use Inertia\Inertia;
use Inertia\Response;

class ServiceController extends Controller
{
    /**
     * Display the services index page
     */
    public function index(Request $request): Response
    {
        // Get services data similar to getData but return for Inertia
        $perPage = (int) $request->get('per_page', 10);
        $search = $request->get('search', '');
        $sortBy = $request->get('sort_by', 'created_at');
        $sortOrder = $request->get('sort_order', 'desc');
        $status = $request->get('status', '');
        $category = $request->get('category', '');
        
        $query = Content::where('type', 'service');

        // Search
        if (!empty($search)) {
            $query->where(function ($q) use ($search) {
                $q->where('title_id', 'ILIKE', "%{$search}%")
                  ->orWhere('title_en', 'ILIKE', "%{$search}%")
                  ->orWhere('excerpt_id', 'ILIKE', "%{$search}%")
                  ->orWhere('excerpt_en', 'ILIKE', "%{$search}%")
                  ->orWhere('category', 'ILIKE', "%{$search}%");
            });
        }

        // Filter by status
        if (!empty($status)) {
            $query->where('status', $status);
        }

        // Filter by category
        if (!empty($category)) {
            $query->where('category', $category);
        }

        // Sort
        $query->orderBy($sortBy, $sortOrder);

        $services = $query->paginate($perPage)->withQueryString();

        // Get categories and statuses for filters
        $categories = Content::where('type', 'service')
            ->distinct()
            ->pluck('category')
            ->filter()
            ->sort()
            ->mapWithKeys(function ($category) {
                return [$category => $category];
            })
            ->toArray();

        $statuses = [
            'draft' => 'Draft',
            'review' => 'Review', 
            'published' => 'Published',
            'archived' => 'Archived'
        ];

        return Inertia::render('content/services/Services', [
            'contents' => $services,
            'type' => 'service',
            'types' => ['service' => 'Service'],
            'categories' => $categories,
            'statuses' => $statuses,
            'filters' => $request->only(['search', 'category', 'status']),
            'bilingualEnabled' => Configuration::get('bilingual_enabled', false),
        ]);
    }

    /**
     * Get paginated services data for DataTable
     */
    public function getData(Request $request): JsonResponse
    {
        try {
            $perPage = (int) $request->get('per_page', 10);
            $search = $request->get('search', '');
            $sortBy = $request->get('sort_by', 'created_at');
            $sortOrder = $request->get('sort_order', 'desc');
            $status = $request->get('status', '');
            $category = $request->get('category', '');
            
            $query = Content::where('type', 'service');

            // Search
            if (!empty($search)) {
                $query->where(function ($q) use ($search) {
                    $q->where('title_id', 'ILIKE', "%{$search}%")
                      ->orWhere('title_en', 'ILIKE', "%{$search}%")
                      ->orWhere('excerpt_id', 'ILIKE', "%{$search}%")
                      ->orWhere('excerpt_en', 'ILIKE', "%{$search}%")
                      ->orWhere('category', 'ILIKE', "%{$search}%");
                });
            }

            // Filter by status
            if (!empty($status)) {
                $query->where('status', $status);
            }

            // Filter by category
            if (!empty($category)) {
                $query->where('category', $category);
            }

            // Sort
            $query->orderBy($sortBy, $sortOrder);

            $services = $query->paginate($perPage);

            // Transform data
            $services->getCollection()->transform(function ($service) {
                return [
                    'id' => $service->id,
                    'title_id' => $service->title_id,
                    'title_en' => $service->title_en,
                    'excerpt_id' => $service->excerpt_id,
                    'excerpt_en' => $service->excerpt_en,
                    'category' => $service->category,
                    'featured_image' => $service->featured_image,
                    'is_published' => $service->is_published,
                    'is_featured' => $service->is_featured,
                    'status' => $service->status,
                    'sort_order' => $service->sort_order,
                    'view_count' => $service->view_count,
                    'created_at' => $service->created_at?->format('Y-m-d H:i:s'),
                    'updated_at' => $service->updated_at?->format('Y-m-d H:i:s'),
                ];
            });

            return response()->json([
                'success' => true,
                'message' => 'Services data retrieved successfully',
                'data' => $services->items(),
                'meta' => [
                    'current_page' => $services->currentPage(),
                    'last_page' => $services->lastPage(),
                    'per_page' => $services->perPage(),
                    'total' => $services->total(),
                    'from' => $services->firstItem(),
                    'to' => $services->lastItem(),
                ]
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Failed to retrieve services data',
                'error' => $e->getMessage(),
            ], 500);
        }
    }

    /**
     * Get service categories and filter options
     */
    public function getFilterOptions(): JsonResponse
    {
        try {
            $categories = Content::where('type', 'service')
                ->distinct()
                ->pluck('category')
                ->filter()
                ->sort()
                ->values();

            $statuses = Content::where('type', 'service')
                ->distinct()
                ->pluck('status')
                ->filter()
                ->sort()
                ->values();

            return response()->json([
                'success' => true,
                'data' => [
                    'categories' => $categories,
                    'statuses' => $statuses,
                ]
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Failed to retrieve filter options',
                'error' => $e->getMessage(),
            ], 500);
        }
    }

    /**
     * Store a new service
     */
    public function store(Request $request)
    {
        // Debug: Log the incoming request data
        \Log::info('Service Store Request Data:', [
            'all_data' => $request->all(),
            'interest_table' => $request->get('interest_table'),
            'document_table' => $request->get('document_table'),
            'fees_table' => $request->get('fees_table'),
        ]);

        // Decode JSON strings back to arrays for validation
        $decodedData = $request->all();
        if (is_string($request->get('interest_table'))) {
            $decodedData['interest_table'] = json_decode($request->get('interest_table'), true);
        }
        if (is_string($request->get('document_table'))) {
            $decodedData['document_table'] = json_decode($request->get('document_table'), true);
        }
        if (is_string($request->get('fees_table'))) {
            $decodedData['fees_table'] = json_decode($request->get('fees_table'), true);
        }
        
        // Replace request data with decoded data
        $request->replace($decodedData);

        $request->validate([
            'title_id' => 'required|string|max:255',
            'title_en' => 'nullable|string|max:255',
            'excerpt_id' => 'required|string|max:1000',
            'excerpt_en' => 'nullable|string|max:1000',
            'content_id' => 'required|string',
            'content_en' => 'nullable|string',
            'category' => 'nullable|string|max:100',
            'featured_image' => 'nullable|image|mimes:jpeg,png,jpg,gif,webp|max:5120',
            'gallery' => 'nullable|array',
            'interest_table' => 'nullable|array',
            'interest_table.headers' => 'nullable|array',
            'interest_table.headers.*' => 'string|max:255',
            'interest_table.rows' => 'nullable|array',
            'interest_table.rows.*' => 'array',
            'interest_table.rows.*.*' => 'string',
            'document_table' => 'nullable|array',
            'document_table.headers' => 'nullable|array',
            'document_table.headers.*' => 'string|max:255',
            'document_table.rows' => 'nullable|array',
            'document_table.rows.*' => 'array',
            'document_table.rows.*.*' => 'string',
            'fees_table' => 'nullable|array',
            'fees_table.headers' => 'nullable|array',
            'fees_table.headers.*' => 'string|max:255',
            'fees_table.rows' => 'nullable|array',
            'fees_table.rows.*' => 'array',
            'fees_table.rows.*.*' => 'string',
            'requirements_id' => 'nullable|string',
            'requirements_en' => 'nullable|string',
            'benefits_id' => 'nullable|string',
            'benefits_en' => 'nullable|string',
            'show_credit_simulation' => 'boolean',
            'tags' => 'nullable|array',
            'sort_order' => 'nullable|integer|min:0',
            'is_published' => 'boolean',
            'is_featured' => 'boolean',
            'status' => 'required|in:draft,review,published,archived',
            'meta_title_id' => 'nullable|string|max:255',
            'meta_title_en' => 'nullable|string|max:255',
            'meta_description_id' => 'nullable|string|max:255',
            'meta_description_en' => 'nullable|string|max:255',
        ]);

        try {
            DB::beginTransaction();

            $data = [
                'type' => 'service',
                'category' => $request->category,
                'title_id' => $request->title_id,
                'title_en' => $request->title_en,
                'excerpt_id' => $request->excerpt_id,
                'excerpt_en' => $request->excerpt_en,
                'content_id' => $request->content_id,
                'content_en' => $request->content_en,
                'gallery' => $request->gallery ? json_encode($request->gallery) : null,
                'interest_table' => $request->interest_table && is_array($request->interest_table) ? $request->interest_table : null,
                'document_table' => $request->document_table && is_array($request->document_table) ? $request->document_table : null,
                'fees_table' => $request->fees_table && is_array($request->fees_table) ? $request->fees_table : null,
                'requirements_id' => $request->requirements_id,
                'requirements_en' => $request->requirements_en,
                'benefits_id' => $request->benefits_id,
                'benefits_en' => $request->benefits_en,
                'show_credit_simulation' => $request->boolean('show_credit_simulation', false),
                'tags' => $request->tags ? json_encode($request->tags) : null,
                'sort_order' => $request->sort_order ?? 0,
                'is_published' => $request->boolean('is_published', false),
                'is_featured' => $request->boolean('is_featured', false),
                'status' => $request->status,
                'published_at' => $request->boolean('is_published') ? now() : null,
                'meta_title_id' => $request->meta_title_id,
                'meta_title_en' => $request->meta_title_en,
                'meta_description_id' => $request->meta_description_id,
                'meta_description_en' => $request->meta_description_en,
            ];

            // Handle featured image upload
            if ($request->hasFile('featured_image')) {
                $file = $request->file('featured_image');
                $path = $file->store('content/services', 'public');
                $data['featured_image'] = $path;
            }

            $service = Content::create($data);

            DB::commit();

            // Return Inertia response for web routes, JSON for API routes
            if ($request->wantsJson() || $request->expectsJson() ) {
                return response()->json([
                    'success' => true,
                    'message' => 'Service created successfully',
                    'data' => $service
                ], 201);
            }

            return redirect()->route('content.services.index')
                ->with('success', 'Service created successfully');

        } catch (\Exception $e) {
            DB::rollBack();
            
            if ($request->wantsJson() || $request->expectsJson() ) {
                return response()->json([
                    'success' => false,
                    'message' => 'Failed to create service',
                    'error' => $e->getMessage(),
                ], 500);
            }

            return redirect()->back()
                ->withErrors(['error' => 'Failed to create service: ' . $e->getMessage()])
                ->withInput();
        }
    }

    /**
     * Show specific service
     */
    public function show($id): JsonResponse
    {
        try {
            $service = Content::where('type', 'service')->findOrFail($id);

            return response()->json([
                'success' => true,
                'message' => 'Service retrieved successfully',
                'data' => $service
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Failed to retrieve service',
                'error' => $e->getMessage(),
            ], 500);
        }
    }

    /**
     * Update service
     */
    public function update(Request $request, $id)
    {
        $service = Content::where('type', 'service')->findOrFail($id);

        // Debug: Log the incoming request data
        \Log::info('Service Update Request Data:', [
            'interest_table' => $request->get('interest_table'),
            'document_table' => $request->get('document_table'),
            'fees_table' => $request->get('fees_table'),
        ]);

        // Decode JSON strings back to arrays for validation
        $decodedData = $request->all();
        if (is_string($request->get('interest_table'))) {
            $decodedData['interest_table'] = json_decode($request->get('interest_table'), true);
        }
        if (is_string($request->get('document_table'))) {
            $decodedData['document_table'] = json_decode($request->get('document_table'), true);
        }
        if (is_string($request->get('fees_table'))) {
            $decodedData['fees_table'] = json_decode($request->get('fees_table'), true);
        }
        
        // Replace request data with decoded data
        $request->replace($decodedData);

        $request->validate([
            'title_id' => 'required|string|max:255',
            'title_en' => 'nullable|string|max:255',
            'excerpt_id' => 'required|string|max:1000',
            'excerpt_en' => 'nullable|string|max:1000',
            'content_id' => 'required|string',
            'content_en' => 'nullable|string',
            'category' => 'nullable|string|max:100',
            'featured_image' => 'nullable|image|mimes:jpeg,png,jpg,gif,webp|max:5120',
            'gallery' => 'nullable|array',
            'interest_table' => 'nullable|array',
            'interest_table.headers' => 'nullable|array',
            'interest_table.headers.*' => 'string|max:255',
            'interest_table.rows' => 'nullable|array',
            'interest_table.rows.*' => 'array',
            'interest_table.rows.*.*' => 'string',
            'document_table' => 'nullable|array',
            'document_table.headers' => 'nullable|array',
            'document_table.headers.*' => 'string|max:255',
            'document_table.rows' => 'nullable|array',
            'document_table.rows.*' => 'array',
            'document_table.rows.*.*' => 'string',
            'fees_table' => 'nullable|array',
            'fees_table.headers' => 'nullable|array',
            'fees_table.headers.*' => 'string|max:255',
            'fees_table.rows' => 'nullable|array',
            'fees_table.rows.*' => 'array',
            'fees_table.rows.*.*' => 'string',
            'requirements_id' => 'nullable|string',
            'requirements_en' => 'nullable|string',
            'benefits_id' => 'nullable|string',
            'benefits_en' => 'nullable|string',
            'show_credit_simulation' => 'boolean',
            'tags' => 'nullable|array',
            'sort_order' => 'nullable|integer|min:0',
            'is_published' => 'boolean',
            'is_featured' => 'boolean',
            'status' => 'required|in:draft,review,published,archived',
            'meta_title_id' => 'nullable|string|max:255',
            'meta_title_en' => 'nullable|string|max:255',
            'meta_description_id' => 'nullable|string|max:255',
            'meta_description_en' => 'nullable|string|max:255',
        ]);

        try {
            DB::beginTransaction();

            $wasPublished = $service->is_published;
            $willBePublished = $request->boolean('is_published', false);

            $updateData = [
                'category' => $request->category,
                'title_id' => $request->title_id,
                'title_en' => $request->title_en,
                'excerpt_id' => $request->excerpt_id,
                'excerpt_en' => $request->excerpt_en,
                'content_id' => $request->content_id,
                'content_en' => $request->content_en,
                'gallery' => $request->gallery ? json_encode($request->gallery) : null,
                'interest_table' => $request->interest_table && is_array($request->interest_table) ? $request->interest_table : null,
                'document_table' => $request->document_table && is_array($request->document_table) ? $request->document_table : null,
                'fees_table' => $request->fees_table && is_array($request->fees_table) ? $request->fees_table : null,
                'requirements_id' => $request->requirements_id,
                'requirements_en' => $request->requirements_en,
                'benefits_id' => $request->benefits_id,
                'benefits_en' => $request->benefits_en,
                'show_credit_simulation' => $request->boolean('show_credit_simulation', false),
                'tags' => $request->tags ? json_encode($request->tags) : null,
                'sort_order' => $request->sort_order ?? $service->sort_order,
                'is_published' => $willBePublished,
                'is_featured' => $request->boolean('is_featured', $service->is_featured),
                'status' => $request->status,
                'published_at' => $willBePublished && !$wasPublished ? now() : $service->published_at,
                'meta_title_id' => $request->meta_title_id,
                'meta_title_en' => $request->meta_title_en,
                'meta_description_id' => $request->meta_description_id,
                'meta_description_en' => $request->meta_description_en,
            ];

            // Handle featured image upload
            if ($request->hasFile('featured_image')) {
                // Delete old image if exists
                if ($service->featured_image && Storage::disk('public')->exists($service->featured_image)) {
                    Storage::disk('public')->delete($service->featured_image);
                }
                
                $file = $request->file('featured_image');
                $path = $file->store('content/services', 'public');
                $updateData['featured_image'] = $path;
            }

            $service->update($updateData);

            DB::commit();

            // Return Inertia response for web routes, JSON for API routes
            if ($request->wantsJson() || $request->expectsJson() ) {
                return response()->json([
                    'success' => true,
                    'message' => 'Service updated successfully',
                    'data' => $service->fresh()
                ]);
            }

            return redirect()->route('content.services.index')
                ->with('success', 'Service updated successfully');

        } catch (\Exception $e) {
            DB::rollBack();
            
            if ($request->wantsJson() || $request->expectsJson() ) {
                return response()->json([
                    'success' => false,
                    'message' => 'Failed to update service',
                    'error' => $e->getMessage(),
                ], 500);
            }

            return redirect()->back()
                ->withErrors(['error' => 'Failed to update service: ' . $e->getMessage()])
                ->withInput();
        }
    }

    /**
     * Delete service
     */
    public function destroy(Request $request, $id)
    {
        $service = Content::where('type', 'service')->findOrFail($id);

        try {
            DB::beginTransaction();

            // Delete featured image if exists
            if ($service->featured_image && Storage::exists($service->featured_image)) {
                Storage::delete($service->featured_image);
            }

            // Delete gallery images if exist
            if ($service->gallery) {
                $gallery = is_string($service->gallery) ? json_decode($service->gallery, true) : $service->gallery;
                if (is_array($gallery)) {
                    foreach ($gallery as $image) {
                        if (Storage::exists($image)) {
                            Storage::delete($image);
                        }
                    }
                }
            }

            $service->delete();

            DB::commit();

            // Return Inertia response for web routes, JSON for API routes
            if ($request->wantsJson() || $request->expectsJson() ) {
                return response()->json([
                    'success' => true,
                    'message' => 'Service deleted successfully'
                ]);
            }

            return redirect()->route('content.services.index')
                ->with('success', 'Service deleted successfully');

        } catch (\Exception $e) {
            DB::rollBack();
            
            if ($request->wantsJson() || $request->expectsJson() ) {
                return response()->json([
                    'success' => false,
                    'message' => 'Failed to delete service',
                    'error' => $e->getMessage(),
                ], 500);
            }

            return redirect()->back()
                ->withErrors(['error' => 'Failed to delete service: ' . $e->getMessage()]);
        }
    }

    /**
     * Handle bulk actions
     */
    public function bulkAction(Request $request): JsonResponse
    {
        $request->validate([
            'action' => 'required|in:publish,unpublish,feature,unfeature,delete,archive',
            'ids' => 'required|array|min:1',
            'ids.*' => 'exists:contents,id'
        ]);

        try {
            DB::beginTransaction();

            $services = Content::where('type', 'service')
                ->whereIn('id', $request->ids)
                ->get();

            if ($services->isEmpty()) {
                return response()->json([
                    'success' => false,
                    'message' => 'No services found with the provided IDs',
                ], 404);
            }

            $affectedCount = 0;

            foreach ($services as $service) {
                switch ($request->action) {
                    case 'publish':
                        $service->update([
                            'is_published' => true,
                            'status' => 'published',
                            'published_at' => $service->published_at ?? now()
                        ]);
                        $affectedCount++;
                        break;
                        
                    case 'unpublish':
                        $service->update([
                            'is_published' => false,
                            'status' => 'draft'
                        ]);
                        $affectedCount++;
                        break;
                        
                    case 'feature':
                        $service->update(['is_featured' => true]);
                        $affectedCount++;
                        break;
                        
                    case 'unfeature':
                        $service->update(['is_featured' => false]);
                        $affectedCount++;
                        break;
                        
                    case 'archive':
                        $service->update([
                            'status' => 'archived',
                            'is_published' => false
                        ]);
                        $affectedCount++;
                        break;
                        
                    case 'delete':
                        // Delete associated files
                        if ($service->featured_image && Storage::exists($service->featured_image)) {
                            Storage::delete($service->featured_image);
                        }
                        
                        if ($service->gallery) {
                            $gallery = is_string($service->gallery) ? json_decode($service->gallery, true) : $service->gallery;
                            if (is_array($gallery)) {
                                foreach ($gallery as $image) {
                                    if (Storage::exists($image)) {
                                        Storage::delete($image);
                                    }
                                }
                            }
                        }
                        
                        $service->delete();
                        $affectedCount++;
                        break;
                }
            }

            DB::commit();

            return response()->json([
                'success' => true,
                'message' => "Bulk action '{$request->action}' completed successfully",
                'data' => [
                    'affected_count' => $affectedCount,
                    'action' => $request->action
                ]
            ]);
        } catch (\Exception $e) {
            DB::rollBack();
            return response()->json([
                'success' => false,
                'message' => 'Failed to perform bulk action',
                'error' => $e->getMessage(),
            ], 500);
        }
    }

    /**
     * Get service statistics
     */
    public function getStats(): JsonResponse
    {
        try {
            $stats = [
                'total' => Content::where('type', 'service')->count(),
                'published' => Content::where('type', 'service')->where('is_published', true)->count(),
                'draft' => Content::where('type', 'service')->where('status', 'draft')->count(),
                'featured' => Content::where('type', 'service')->where('is_featured', true)->count(),
            ];

            return response()->json([
                'success' => true,
                'data' => $stats
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Failed to retrieve statistics',
                'error' => $e->getMessage(),
            ], 500);
        }
    }

    /**
     * API endpoint for frontend (services)
     */
    public function servicesApi(Request $request): JsonResponse
    {
        try {
            $startTime = microtime(true);
            
            $query = Content::where('type', 'service')->where('is_published', true)->where('status', 'published');

            if ($request->filled('category')) {
                $query->byCategory($request->get('category'));
            }

            if ($request->filled('featured')) {
                $query->featured();
            }

            if ($request->filled('search')) {
                $search = $request->get('search');
                $query->where(function ($q) use ($search) {
                    $q->where('title_id', 'like', "%{$search}%")
                        ->orWhere('title_en', 'like', "%{$search}%")
                        ->orWhere('excerpt_id', 'like', "%{$search}%")
                        ->orWhere('excerpt_en', 'like', "%{$search}%");
                });
            }

            $services = $query->orderBy('is_featured', 'desc')
                ->orderBy('sort_order', 'asc')
                ->orderBy('published_at', 'desc')
                ->paginate($request->get('limit', 3));

            // Transform the data to include full image URLs
            $services->getCollection()->transform(function ($service) {
                $service->featured_image_url = $service->featured_image ? asset('storage/' . $service->featured_image) : null;
                return $service;
            });

            $endTime = microtime(true);
            $responseTime = round(($endTime - $startTime) * 1000, 2);

            return response()->json([
                'success' => true,
                'message' => 'Services data retrieved successfully',
                'data' => $services,
                'categories' => Content::getServiceCategories(),
                'response_time_ms' => $responseTime
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Failed to retrieve services data: ' . $e->getMessage(),
            ], 500);
        }
    }

    /**
     * API endpoint for frontend (single service detail)
     */
    public function serviceDetailApi(Request $request, $id): JsonResponse
    {
        try {
            $startTime = microtime(true);
            
            $service = Content::where('type', 'service')
                ->where('is_published', true)
                ->where('status', 'published')
                ->findOrFail($id);

            // Transform the data to include full image URLs
            $service->featured_image_url = $service->featured_image ? asset('storage/' . $service->featured_image) : null;
            
            // Parse gallery images if they exist
            if ($service->gallery) {
                try {
                    $galleryImages = json_decode($service->gallery, true);
                    if (is_array($galleryImages)) {
                        $service->gallery_urls = array_map(function($image) {
                            return asset('storage/' . $image);
                        }, $galleryImages);
                    }
                } catch (\Exception $e) {
                    $service->gallery_urls = [];
                }
            } else {
                $service->gallery_urls = [];
            }
            
            // Parse tags if they exist
            if ($service->tags) {
                try {
                    $service->tags_array = json_decode($service->tags, true) ?: [];
                } catch (\Exception $e) {
                    $service->tags_array = [];
                }
            } else {
                $service->tags_array = [];
            }

            $endTime = microtime(true);
            $responseTime = round(($endTime - $startTime) * 1000, 2);

            return response()->json([
                'success' => true,
                'message' => 'Service detail retrieved successfully',
                'data' => $service,
                'categories' => Content::getServiceCategories(),
                'response_time_ms' => $responseTime
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Service not found or failed to retrieve service detail: ' . $e->getMessage(),
            ], 404);
        }
    }
}